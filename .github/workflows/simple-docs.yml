name: Simple Documentation Build and Deploy

on:
  push:
    branches:
      - main
      - nabla-python
  pull_request:
    branches:
      - main
      - nabla-python
  # Allow manual trigger
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper versioning
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          
      - name: Install documentation dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r docs/requirements.txt
          pip install sphinx-book-theme
          
      - name: Create minimal nabla stub
        run: |
          mkdir -p /tmp/nabla_stub/nabla
          
          # Create a minimal nabla stub
          cat > /tmp/nabla_stub/nabla/__init__.py << 'EOF'
          """Nabla stub for documentation"""
          import numpy as np
          
          class Array:
              def __init__(self, *args, **kwargs): pass
              def numpy(self): return np.array([])
          
          def array(*args, **kwargs): return Array()
          def arange(*args, **kwargs): return Array()
          def sin(x): return Array()
          def cos(x): return Array()
          def zeros(*args, **kwargs): return Array()
          def ones(*args, **kwargs): return Array()
          def exp(x): return Array()
          def log(x): return Array()
          def tan(x): return Array()
          def tanh(x): return Array()
          
          class linalg:
              @staticmethod
              def norm(*args, **kwargs): return Array()
          
          def jit(fn=None, **kwargs):
              def decorator(func): return func
              return decorator if fn is None else decorator(fn)
          
          def vmap(fn=None, **kwargs):
              def decorator(func): return func
              return decorator if fn is None else decorator(fn)
          
          def jvp(fn=None, **kwargs):
              def decorator(func): return func
              return decorator if fn is None else decorator(fn)
              
          def vjp(fn=None, **kwargs):
              def decorator(func): return func
              return decorator if fn is None else decorator(fn)
              
          class DType: pass
          EOF
          
          # Create core module
          mkdir -p /tmp/nabla_stub/nabla/core
          cat > /tmp/nabla_stub/nabla/core/__init__.py << 'EOF'
          from ..core.array import Array
          EOF
          
          mkdir -p /tmp/nabla_stub/nabla/core
          cat > /tmp/nabla_stub/nabla/core/array.py << 'EOF'
          class Array: pass
          EOF
          
          # Create setup.py
          cat > /tmp/nabla_stub/setup.py << 'EOF'
          from setuptools import setup, find_packages
          setup(name="nabla", version="0.1.0", packages=find_packages())
          EOF
          
          # Install the stub
          cd /tmp/nabla_stub
          pip install -e .
          
          # Verify installation
          python -c "try: import nabla; print('nabla imported successfully'); except: print('Failed to import nabla')"
      
      - name: Prepare docs config
        run: |
          cd docs
          
          # Add autodoc_mock_imports to conf.py
          echo '
          # Mock imports for modules that might be missing
          autodoc_mock_imports = ["nabla", "nabla.core", "nabla.ops", "nabla.nn", "nabla.utils", "nabla.kernels"]
          ' >> conf.py
          
          # Disable autosummary generation temporarily
          sed -i 's/autosummary_generate = True/autosummary_generate = False/' conf.py
      
      - name: Build docs without executing examples
        run: |
          cd docs
          PYTHONPATH="/tmp/nabla_stub:$PYTHONPATH" sphinx-build -b html -D plot_gallery=0 . _build/html
          touch _build/html/.nojekyll
      
      - name: Setup Pages
        if: github.event_name == 'push' && github.ref == 'refs/heads/nabla-python' || github.event_name == 'workflow_dispatch'
        uses: actions/configure-pages@v4
        
      - name: Upload artifact
        if: github.event_name == 'push' && github.ref == 'refs/heads/nabla-python' || github.event_name == 'workflow_dispatch'
        uses: actions/upload-pages-artifact@v3
        with:
          path: './docs/_build/html'
          
      - name: Deploy to GitHub Pages
        if: github.event_name == 'push' && github.ref == 'refs/heads/nabla-python' || github.event_name == 'workflow_dispatch'
        id: deployment
        uses: actions/deploy-pages@v4
